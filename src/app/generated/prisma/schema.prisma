generator client {
  provider      = "prisma-client-js"
  output        = "../src/app/generated/prisma"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-1.0.x"] // Added for better compatibility across different environments like Vercel
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model News {
  id           String   @id @default(cuid())
  title        String   @unique
  slug         String   @unique
  source       String?
  imageSource  String?
  subtitle     String?
  publisher    String
  tags         String[]
  category     String
  slugCategory String
  content      String
  publishedAt  DateTime
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Advertisement {
  id        String     @id @default(cuid())
  campaing  String     @unique
  startDate DateTime
  endDate   DateTime
  image     String?
  link      String?
  position  AdPosition
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum AdPosition {
  HEADER // 728x90
  HIGHLIGHT // 300x250
}
